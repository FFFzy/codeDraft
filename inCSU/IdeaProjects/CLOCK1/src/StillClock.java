import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.lang.Thread;
import java.util.Timer;
import java.util.TimerTask;



public class StillClock extends JPanel {

    /**
     * @param args
     */
    private int hour;
    private int minute;
    private int second;

    //构造函数
    public StillClock() {
        setCurrentTime();
    }

    //返回小时
    public int getHour() {
        return hour;
    }


    public int getMinute() {
        return minute;
    }


    public int getSecond() {
        return second;
    }


    //绘制时钟
    protected void paintComponent(Graphics g) {

        super.paintComponent(g);
        //初始化
        int clockRadius = (int) (Math.min(getWidth(), getHeight()) * 0.8 * 0.5);
        int xCenter = getWidth() / 2;
        int yCenter = getHeight() / 2;
        //画圆
        g.setColor(Color.black);
        g.drawOval(xCenter - clockRadius, yCenter - clockRadius, 2 * clockRadius, 2 * clockRadius);
        g.drawString("12", xCenter - 5, yCenter - clockRadius + 15);
        g.drawString("9", xCenter - clockRadius + 3, yCenter + 5);
        g.drawString("3", xCenter + clockRadius - 10, yCenter + 3);
        g.drawString("6", xCenter - 3, yCenter + clockRadius - 3);
        //画秒针
        int sLength = (int) (clockRadius * 0.8);
        int xSecond = (int) (xCenter + sLength * Math.sin(second * (2 * Math.PI / 60)));
        int ySecond = (int) (yCenter - sLength * Math.cos(second * (2 * Math.PI / 60)));

        g.setColor(Color.red);
        g.drawLine(xCenter, yCenter, xSecond, ySecond);

        //画分针
        int mLenth = (int) (clockRadius * 0.65);
        int xMinute = (int) (xCenter + mLenth * Math.sin(minute * (2 * Math.PI / 60)));
        int yMinute = (int) (xCenter - mLenth * Math.cos(minute * (2 * Math.PI / 60)));
        g.setColor(Color.blue);
        g.drawLine(xCenter, yCenter, xMinute, yMinute);

        //画时针
        int hLength = (int) (clockRadius * 0.5);
        int xHour = (int) (xCenter + hLength * Math.sin((hour % 12 + minute / 60.0) * (2 * Math.PI / 12)));
        int yHour = (int) (yCenter - hLength * Math.cos((hour % 12 + minute / 60.0) * (2 * Math.PI / 12)));
        g.setColor(Color.green);
        g.drawLine(xCenter, yCenter, xHour, yHour);

        //画数字时钟
        class NewJFrame extends javax.swing.JFrame {
            StillClock stillClock;

            /**
             * Creates new form NewJFrame
             */
            public NewJFrame() {
                initComponents();
                this.setTitle("Exercise3");
                this.setLocationRelativeTo(null);
                this.setResizable(false);
                //设置数据初始值
                jSpinner1.setValue(0);
                jSpinner2.setValue(0);
                jSpinner3.setValue(0);
                jSpinner3.requestFocus();

                Timer timer = new Timer();
                //定时器执行任务
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        int second = Integer.parseInt(jSpinner3.getValue().toString());
                        second++;
                        jSpinner3.setValue(second);
                        repaint();
                    }
                }, 0, 1000);

            }

            /**
             * This method is called from within the constructor to initialize the form.
             * WARNING: Do NOT modify this code. The content of this method is always
             * regenerated by the Form Editor.
             */
            @SuppressWarnings("unchecked")
            // <editor-fold defaultstate="collapsed" desc="Generated Code">
            private void initComponents() {

                jButton1 = new javax.swing.JButton();
                jButton2 = new javax.swing.JButton();
                jButton3 = new javax.swing.JButton();
                jSpinner1 = new javax.swing.JSpinner();
                jSpinner2 = new javax.swing.JSpinner();
                jSpinner3 = new javax.swing.JSpinner();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                jButton1.setText("OK");
                jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jButton1MouseClicked(evt);
                    }
                });
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1ActionPerformed(evt);
                    }
                });

                jButton2.setText("Cancel");
                jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jButton2MouseClicked(evt);
                    }
                });

                jButton3.setText("Apply");

                jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
                jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
                    public void stateChanged(javax.swing.event.ChangeEvent evt) {
                        jSpinner1StateChanged(evt);
                    }
                });

                jSpinner2.setModel(new javax.swing.SpinnerNumberModel(0, -1, 60, 1));
                jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
                    public void stateChanged(javax.swing.event.ChangeEvent evt) {
                        jSpinner2StateChanged(evt);
                    }
                });

                jSpinner3.setModel(new javax.swing.SpinnerNumberModel(0, -1, 60, 1));
                jSpinner3.addChangeListener(new javax.swing.event.ChangeListener() {
                    public void stateChanged(javax.swing.event.ChangeEvent evt) {
                        jSpinner3StateChanged(evt);
                    }
                });

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jSpinner1)
                                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                                        .addGap(55, 55, 55)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(55, 55, 55)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 59, Short.MAX_VALUE))
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addContainerGap(280, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(54, 54, 54)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(65, 65, 65))
                );

                pack();
            }// </editor-fold>

            private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
                // TODO add your handling code here:
            }

            private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {
                // TODO add your handling code here:
                System.exit(WIDTH);
            }

            private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {
                // TODO add your handling code here:
                System.exit(WIDTH);
            }

            private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
                int hour = Integer.parseInt(jSpinner1.getValue().toString());
                //时钟变化
                if (hour == 24) {
                    jSpinner1.setValue(0);
                }
                //时钟变化
                if (hour == -1) {
                    jSpinner1.setValue(23);
                }
            }

            private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
                int hour = Integer.parseInt(jSpinner1.getValue().toString());
                int minute = Integer.parseInt(jSpinner2.getValue().toString());
                //分钟变化
                if (minute == 60) {
                    //时钟变化
                    if (hour == 24) {
                        jSpinner1.setValue(0);
                    } else {
                        jSpinner1.setValue(hour + 1);
                    }
                    jSpinner2.setValue(0);
                }
                //分钟变化
                if (minute == -1) {
                    //时钟变化
                    if (hour == 0) {
                        jSpinner1.setValue(23);
                    } else {
                        jSpinner1.setValue(hour - 1);
                    }
                    jSpinner2.setValue(59);
                }
            }

            private void jSpinner3StateChanged(javax.swing.event.ChangeEvent evt) {
                int hour = Integer.parseInt(jSpinner1.getValue().toString());
                int minute = Integer.parseInt(jSpinner2.getValue().toString());
                int second = Integer.parseInt(jSpinner3.getValue().toString());
                //秒钟变化
                if (second == 60) {
                    //分钟变化
                    if (minute == 59) {
                        //时钟变化
                        if (hour == 23) {
                            jSpinner1.setValue(0);
                        } else {
                            jSpinner1.setValue(hour + 1);
                        }
                        jSpinner2.setValue(0);
                    } else {
                        jSpinner2.setValue(minute + 1);
                    }
                    jSpinner3.setValue(0);
                }
                //秒钟变化
                if (second == -1) {
                    //分钟变化
                    if (minute == 0) {
                        //时钟变化
                        if (hour == 0) {
                            jSpinner1.setValue(23);
                        } else {
                            jSpinner1.setValue(hour - 1);
                        }
                        jSpinner2.setValue(59);
                    } else {
                        jSpinner2.setValue(minute - 1);
                    }
                    jSpinner3.setValue(59);
                }
            }

            private void jSpinner3InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                // TODO add your handling code here:
            }


            public static void main(String[] args) {

                try {
                    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            javax.swing.UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                    java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        new NewJFrame().setVisible(true);
                    }
                });
            }

            // Variables declaration - do not modify
            private javax.swing.JButton jButton1;
            private javax.swing.JButton jButton2;
            private javax.swing.JButton jButton3;
            private javax.swing.JSpinner jSpinner1;
            private javax.swing.JSpinner jSpinner2;
            private javax.swing.JSpinner jSpinner3;
            // End of variables declaration
        }


        // TODO Auto-generated method stub
        JFrame frame = new JFrame("DiaplayClock");
        frame.setResizable(false);
        frame.setTitle("DiaplayClock");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 350);
        frame.setVisible(true);

        while (true) {
            StillClock clock = new StillClock();
            frame.getContentPane().add(clock);
            clock.setVisible(true);
            frame.validate();
            try {
                Thread.sleep(1000);

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            clock.setVisible(false);
            frame.remove(clock);
            clock = null;
            frame.validate();

        }

    }

    public void setCurrentTime() {
        Calendar calendar = new GregorianCalendar();

        this.hour = calendar.get(Calendar.HOUR_OF_DAY);
        this.minute = calendar.get(Calendar.MINUTE);
        this.second = calendar.get(Calendar.SECOND);
    }
}